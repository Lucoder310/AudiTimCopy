[
    {
        "id": "6761cd81a24d274a",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6eb1bac4457d8171",
        "type": "mqtt in",
        "z": "6761cd81a24d274a",
        "name": "MQTT-Node",
        "topic": "dhbw/ai/si2023/5/max4466/0",
        "qos": "2",
        "datatype": "json",
        "broker": "18d3dd12ac8f58c2",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 310,
        "y": 160,
        "wires": [
            [
                "caa9d18689140a85",
                "bf6a215f9586bb05"
            ]
        ]
    },
    {
        "id": "caa9d18689140a85",
        "type": "function",
        "z": "6761cd81a24d274a",
        "name": "function 1",
        "func": "const data = msg.payload;\n\nmsg.payload = {\n    bucket: 'DB',\n    precision: 'ms',\n    token: '123456789',\n    method: 'POST',\n    data: []\n};\n\nconst baseTimestamp = Number(data.timestamp) * 1000; // convert to ms\nconst baseSequence = data.sequence;\nconst values = data.value;\n\nfor (let i = 0; i < 10; i++) {\n    const indexSensor1 = i;\n    const indexSensor2 = 10 + i;\n    const indexSensor3 = 20 + i;\n    const indexSensor4 = 30 + i;\n    const reading1 = Number(values[indexSensor1]);\n    const reading2 = Number(values[indexSensor2]);\n    const reading3 = Number(values[indexSensor3]);\n    const reading4 = Number(values[indexSensor4]);\n\n    msg.payload.data.push({\n        measurement: 'sensor_data',\n        fields: {\n            sensor_1: reading1,\n            sensor_2: reading2,\n            sensor_3: reading3,\n            sensor_4: reading4\n        },\n\n        timestamp: baseTimestamp + (i * 100),\n    });\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 200,
        "wires": [
            [
                "7701405c8a7ed7d9",
                "257fd1e076dbb753"
            ]
        ]
    },
    {
        "id": "7701405c8a7ed7d9",
        "type": "debug",
        "z": "6761cd81a24d274a",
        "name": "Influx Mirror",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 240,
        "wires": []
    },
    {
        "id": "e86b8df27f37b702",
        "type": "function",
        "z": "6761cd81a24d274a",
        "name": "Virtual MQTT message",
        "func": "// Sequence counter\ncontext.sequence = (context.sequence || 0) + 1;\nlet timestamp = Math.floor(Date.now() / 1000);\nlet value = Array.from({ length: 40 }, () => Math.floor(Math.random() * 4096));\n\n// Construct the simulated message payload\nmsg.payload = {\n    timestamp: timestamp,\n    value: value,\n    sequence: context.sequence,\n    meta: \"null\"\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 240,
        "wires": [
            [
                "caa9d18689140a85",
                "bf6a215f9586bb05"
            ]
        ]
    },
    {
        "id": "8e065df14c632f75",
        "type": "inject",
        "z": "6761cd81a24d274a",
        "name": "Virtual MQTT trigger",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 100,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "bf6a215f9586bb05",
        "type": "debug",
        "z": "6761cd81a24d274a",
        "name": "MQTT Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 280,
        "wires": []
    },
    {
        "id": "af428bb866f14fb8",
        "type": "debug",
        "z": "6761cd81a24d274a",
        "name": "InfluxDebug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 320,
        "wires": []
    },
    {
        "id": "257fd1e076dbb753",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "6761cd81a24d274a",
        "server": "ebd9cdaa089e58f8",
        "name": "InfluxDB",
        "x": 640,
        "y": 200,
        "wires": [
            [
                "af428bb866f14fb8"
            ]
        ]
    },
    {
        "id": "18d3dd12ac8f58c2",
        "type": "mqtt-broker",
        "name": "HÃ¤nischMqtt",
        "broker": "aicon.dhbw-heidenheim.de",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ebd9cdaa089e58f8",
        "type": "Stackhero-InfluxDB-v2-Server",
        "name": "AudiTim Influx",
        "host": "influxdb",
        "port": "8086",
        "tls": false
    }
]